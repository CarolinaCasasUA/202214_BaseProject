{
	"info": {
		"_postman_id": "921e392e-d270-4a25-90dc-7d7ab6e5e139",
		"name": "Aerolíneas",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Aerolíneas",
			"item": [
				{
					"name": "Crear una aerolínea válida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json()",
									"pm.globals.set(\"airline_id\", data.id);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"   pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"Aerolinea 1\",\n   \"description\": \"Aerolinea 1\",\n   \"foundationDate\":  \"1995-08-24\",\n   \"webPage\": \"www.aeropuerto1.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/airlines/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airlines",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear una aerolínea invalida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 412\", function () {",
									"   pm.response.to.have.status(412);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"Foundation date invalid. The foundation date should be before the current date\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"Aerolinea 2\",\n   \"description\": \"Aerolinea 2\",\n   \"foundationDate\":  \"2025-08-24\",\n   \"webPage\": \"www.aeropuerto2.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/airlines",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airlines"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener todas las aerolíneas.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Number of airlines > ' + 0, function () {",
									"   var data = pm.response.json()",
									"   pm.expect(data.length).to.greaterThan(0)",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/airlines/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airlines",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener una aerolínea por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/airlines/{{airline_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airlines",
								"{{airline_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener una aerolínea por un ID que no existe.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The airline with the given id was not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/airlines/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airlines",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar una aerolínea",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json()",
									"pm.globals.set(\"airline_id\", data.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"Aerolinea 1\",\n   \"description\": \"Aerolinea 1 actualizada\",\n   \"foundationDate\":  \"1995-08-24\",\n   \"webPage\": \"www.aeropuerto1.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/airlines/{{airline_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airlines",
								"{{airline_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar una aerolínea con un ID que no existe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The airline with the given id was not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"Aerolinea 1\",\n   \"description\": \"Aerolinea 1 actualizada\",\n   \"foundationDate\":  \"1995-08-24\",\n   \"webPage\": \"www.aeropuerto1.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/airlines/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airlines",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Eliminar una aerolínea por su ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"   pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/airlines/{{airline_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airlines",
								"{{airline_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Eliminar una aerolínea con un ID que no existe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The airline with the given id was not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/airlines/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airlines",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Aeropuertos",
			"item": [
				{
					"name": "Crear un aeropuerto válido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json()",
									"pm.globals.set(\"airport_id\", data.id);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"   pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"Aeropuerto 1\",\n   \"code\": \"A01\",\n   \"country\":  \"Colombia\",\n   \"city\": \"bogota\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/airports",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear un aeropuerto inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 412\", function () {",
									"   pm.response.to.have.status(412);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"Airport code should has 3 characters\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"Aeropuerto 1\",\n   \"code\": \"A0100\",\n   \"country\":  \"Colombia\",\n   \"city\": \"bogota\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/airports",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener todos los aeropuertos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Number of airports > ' + 0, function () {",
									"   var data = pm.response.json()",
									"   pm.expect(data.length).to.greaterThan(0)",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/airports",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener un aeropuerto por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/airports/{{airport_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airports",
								"{{airport_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener un aeropuerto por un ID que no existe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The airport with the given id was not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/airports/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airports",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar un aeropuerto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json()",
									"pm.globals.set(\"airline_id\", data.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"Aeropuerto 1\",\n   \"code\": \"A01\",\n   \"country\":  \"Colombia\",\n   \"city\": \"bogota\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/airports/{{airport_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airports",
								"{{airport_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar un aeropuerto con un ID que no existe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The airport with the given id was not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"Aeropuerto 1\",\n   \"code\": \"A01\",\n   \"country\":  \"Colombia\",\n   \"city\": \"bogota\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/airports/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airports",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Eliminar un aeropuerto por su ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"   pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/airports/{{airport_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airports",
								"{{airport_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Eliminar un aeropuerto con un ID que no existe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The airport with the given id was not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/airports/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airports",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Aerolíneas-Aeropuertos",
			"item": [
				{
					"name": "Crear una aerolínea válida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json()",
									"pm.globals.set(\"airline_id\", data.id);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"   pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"Aerolinea 1\",\n   \"description\": \"Aerolinea 1\",\n   \"foundationDate\":  \"1995-08-24\",\n   \"webPage\": \"www.aeropuerto1.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/airlines/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airlines",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear un aeropuerto válido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json()",
									"pm.globals.set(\"airport_id\", data.id);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"   pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"Aeropuerto 1\",\n   \"code\": \"A01\",\n   \"country\":  \"Colombia\",\n   \"city\": \"bogota\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/airports",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear un aeropuerto válido Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json()",
									"pm.globals.set(\"airport_id2\", data.id);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"   pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"Aeropuerto 1\",\n   \"code\": \"A01\",\n   \"country\":  \"Colombia\",\n   \"city\": \"bogota\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/airports",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Asociar un aeropuerto a una aerolínea.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"   pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/airlines/{{airline_id}}/airports/{{airport_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airlines",
								"{{airline_id}}",
								"airports",
								"{{airport_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Asociar un aeropuerto que no existe a una aerolínea.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The airport with the given id was not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/airlines/{{airline_id}}/airports/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airlines",
								"{{airline_id}}",
								"airports",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener todos los aeropuertos que cubre una aerolínea.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/airlines/{{airline_id}}/airports/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airlines",
								"{{airline_id}}",
								"airports",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener un aeropuerto asociado a una aerolínea",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/airlines/{{airline_id}}/airports/{{airport_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airlines",
								"{{airline_id}}",
								"airports",
								"{{airport_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener un aeropuerto que no esté asociado a una aerolínea",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The airport with the given id was not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/airlines/{{airline_id}}/airports/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airlines",
								"{{airline_id}}",
								"airports",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar los aeropuertos que están asociados a una aerolínea",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"name\": \"Aeropuerto actualizado\",\n        \"code\": \"A01\",\n        \"country\":  \"Colombia\",\n        \"city\": \"bogota\"\n    }\n   \n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/airlines/{{airline_id}}/airports",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airlines",
								"{{airline_id}}",
								"airports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar los aeropuertos asociados a una aerolínea, con un aeropuerto inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The airport with the given id was not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    \n        {\n            \"id\": \"00000000-0000-0000-0000-000000000000\",\n            \"name\": \"Aeropuerto actualizado\",\n            \"code\": \"A01\",\n            \"country\":  \"Colombia\",\n            \"city\": \"bogota\"\n        }\n   \n   \n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/airlines/{{airline_id}}/airports",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airlines",
								"{{airline_id}}",
								"airports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear una aerolínea válida Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json()",
									"pm.globals.set(\"airline_id\", data.id);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"   pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"Aerolinea 1\",\n   \"description\": \"Aerolinea 1\",\n   \"foundationDate\":  \"1995-08-24\",\n   \"webPage\": \"www.aeropuerto1.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/airlines/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airlines",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear un aeropuerto válido Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json()",
									"pm.globals.set(\"airport_id\", data.id);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"   pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"Aeropuerto 1\",\n   \"code\": \"A01\",\n   \"country\":  \"Colombia\",\n   \"city\": \"bogota\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/airports",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Asociar un aeropuerto a una aerolínea. Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"   pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/airlines/{{airline_id}}/airports/{{airport_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airlines",
								"{{airline_id}}",
								"airports",
								"{{airport_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Eliminar un aeropuerto previamente asociado a una aerolínea.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"   pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/airlines/{{airline_id}}/airports/{{airport_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airlines",
								"{{airline_id}}",
								"airports",
								"{{airport_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Eliminar un aeropuerto que no estaba previamente asociado a una aerolíne",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 412\", function () {",
									"   pm.response.to.have.status(412);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The airport with the given id is not associated to the airline\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/airlines/{{airline_id}}/airports/{{airport_id2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airlines",
								"{{airline_id}}",
								"airports",
								"{{airport_id2}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "localhost:3000/api/v1",
			"type": "default"
		}
	]
}